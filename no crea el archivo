/*  The circuit for ESP32:
   SD card attached to SPI bus as follows:
        SS    = 5;
        MOSI  = 23;
        MISO  = 19;
        SCK   = 18;
*/

#include <SPI.h>
#include <SD.h>
#include <string.h>

File sensores;
char filename[] = "00000000.CSV";  // defino la variable donde guardo el nombre con la fecha

//config de RTC
//Bibliotecas y variables para RTC
#include <Wire.h>
#include "RTClib.h"
// RTC_DS1307 rtc; (si tuviera el otro)
RTC_DS3231 RTC;

//Bibliotecas para pantalla Oled
//#include <SPI.h> ya está incluida arriba
//#include <Wire.h> ya está incluida arriba
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define ANCHO_PANTALLA 128 // ancho pantalla OLED
#define ALTO_PANTALLA 64 // alto pantalla OLED
        Adafruit_SSD1306 display(128, 64, &Wire, -1);

//config pines y multiplexores del WBB
#define sclk    17                          // pin SCLK ADS1222 1 y 2, entrada de reloj de serie -D2
#define Dout1   2                          // pin Dout ADS1222 1, DRDY/DOUT drdy-> nivel bajo datos a leer listos, salida de datos por flaco positivo de slck, MSB primero -D3
#define Dout2   4                          // pin Dout ADS1222 2, DRDY/DOUT drdy-> nivel bajo datos a leer listos, salida de datos por flaco positivo de slck, MSB primero -D4
#define mux     16                          // pin MUX ADS1222 1 y 2, selección de la entrada analógica 0->AINP1+ AINN1- 1->AINP2+ AINN2 -D5

#define PULSADOR_wii 15                     // pulsador WBB
#define LED_wii      3                     // Para LED
#define ON_wii       1                     // Enciende WBB

unsigned long sensor [4] ={0, 0, 0, 0}, sensor_cal[4] ={0, 0, 0, 0};

  int pulsador;
  int g0=0,g1=0,g2=0,g3=0,a=0,b=0,c=0,d=0;
  int prom0=0,prom1=0,prom2=0,prom3=0,S0=0,S1=0,S2=0,S3=0;
  int j,k,m,L;
  String x;

//para detener el rebote de la interrupción que genera bouncing

const int timeThreshold = 150;
const int intPin = 2;
volatile int ISRCounter = 0;
int counter = 0;
long startTime = 0;



//##########################################################################################
// Inicializa ADS1222
void iniADS1222(void){
byte x, n;
  digitalWrite(mux, HIGH);
  for (n =0; n <3; n++){                                          // realizamos 3 lecturas completas
    delay (10);
    for(x =0; x <24; x++){                                        // 24 pulsos-> 24 bits
      digitalWrite(sclk, HIGH);                                   // HIGH pulse, algo más de 33us
      delayMicroseconds(30);  
      digitalWrite(sclk, LOW);                                    // LOW pulse, algo más de 33us
      delayMicroseconds(30);                          
    }
  }
  delay (10);
  while (digitalRead(Dout1) + digitalRead(Dout2)){}               // esperamos datos preparados 
  for(x =0; x <26; x++){                                          // auto-calibrado 26 pulsos-> 24bits + 2  On calibración
    digitalWrite(sclk, HIGH); 
    delayMicroseconds(5);  
    digitalWrite(sclk, LOW); 
    delayMicroseconds(5);
   }
   #ifdef debug
    Serial.println("Auto-calibrado..");
   #endif
   while (digitalRead(Dout1) + digitalRead(Dout2)){}              // esperamos fin calibracion                           
   #ifdef debug
    Serial.println("Inicializando");
   #endif
} 

// ADS1222 leemos (se leen los 20 bits MSB, solo son efectivos los 20 bits de más peso)
void read_ads1222(bool canal){
byte x, n =0, z =2;
  if (canal){
    n =1;
    z =3;
  }
  digitalWrite(mux, canal);                                        // selecionamos el canal
  delayMicroseconds(4);  //tenia 8
  do{
    delayMicroseconds(2); // tenía 2
  } while (digitalRead(Dout1) + digitalRead(Dout2));               // esperamos datos listos, Dout1 y Dout2 
  
  for(x =23; x >=4; x--){                                          // del bit 23 al 3
    digitalWrite(sclk, HIGH);
    digitalRead(Dout1) ? bitWrite(sensor[n], x, 1): bitWrite(sensor[n], x, 0);// algo más de 16us, leemos 0 y 1 
    digitalRead(Dout2) ? bitWrite(sensor[z], x, 1): bitWrite(sensor[z], x, 0);// algo más de 16us, leemos 2 y 3
    digitalWrite(sclk, LOW);
    delayMicroseconds(10);  //tenía 30
  }
  for (x =0; x <5; x++){                                           // realizamos 5 pulsos, bits del 3 al 0 + pulso 25 -> forzamos Dout1 y Dout2 a 1
  digitalWrite(sclk, HIGH);
  delayMicroseconds(10);  //tenía 30                                                 
  digitalWrite(sclk, LOW);
  delayMicroseconds(10);    //tenía 30
  }
}


//**********************************************************************************************************//
// configuración inicial
void setup() {
byte ciclo =0;
  pinMode(ON_wii, OUTPUT);                           
  digitalWrite(ON_wii, HIGH);                             // encendemos controladore WII y TFT                                          
  pinMode(mux, OUTPUT);                           
  digitalWrite(mux, LOW);  
  pinMode(sclk, OUTPUT);                           
  digitalWrite(sclk, LOW); 
  pinMode(LED_wii, OUTPUT);
  digitalWrite(LED_wii, HIGH);  
  pinMode(PULSADOR_wii, INPUT);   
  pinMode(Dout1, INPUT);
  pinMode(Dout2, INPUT);          


  //Inicio Monitor serial
  Serial.begin(115200);
  digitalWrite(LED_wii, HIGH);
  iniADS1222();
  delay(200);

//Inicio de SD
  Serial.print("Initializing SD card...");
 
  if (!SD.begin(5)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");
 
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  
 

 //Inicio RTC
// Se establece fecha y hora sólo la primera vez, una vez hecho se comenta esta línea
    Wire.begin();
    RTC.begin();
    if (! RTC.begin()) {
    Serial.println("no se encuentra modulo RTC");

  }
//  RTC.adjust(DateTime(__DATE__,__TIME__));
//  rtc.adjust(DateTime(2021, 12, 27, 23, 5, 0));
//  RTC.adjust(DateTime(2021, 12, 23, 7, 15, 0));
   // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));



//interrupción
attachInterrupt(digitalPinToInterrupt(PULSADOR_wii), registro,  RISING);


//calibración
      read_ads1222(0);
      read_ads1222(1);


      Serial.print("\ncalibrando... \n");
 
      for(int i = 0; i<500; i++){
          g0 =  sensor[0];
          g1 =  sensor[1];
          g2 =  sensor[2];
          g3 =  sensor[3];

          a = a+g0;
          b = b+g1;
          c = c+g2;
          d = d+g3;
delay (10);

      }

          prom0 = (a/500);
          prom1 = (b/500);
          prom2 = (c/500);
          prom3 = (d/500);

                      Serial.print("\ncalibración finalizada, el valor promedio de cada sensor es: \n");
                      Serial.print("\nsensor 1 \n");
                      Serial.print(prom0);
                      Serial.print(" \n");
                      Serial.print("\nsensor 2 \n");
                      Serial.print(prom1);
                      Serial.print(" \n");
                      Serial.print("\nsensor 3 \n");
                      Serial.print(prom2);
                      Serial.print(" \n");
                      Serial.print("\nsensor 4 \n");
                      Serial.print(prom3);
                      Serial.print(" \n");






}

int as=0;
// **-MAIN-**

void loop() {
  
  while (as<1){
Serial.println("creando archivo en la tarjeta microSD: ");

DateTime now = RTC.now();

filename[0] = (now.year()/1000)%10 + '0'; //To get 1st digit from year()
filename[1] = (now.year()/100)%10 + '0'; //To get 2nd digit from year()
filename[2] = (now.year()/10)%10 + '0'; //To get 3rd digit from year()
filename[3] = now.year()%10 + '0'; //To get 4th digit from year()
filename[4] = now.month()/10 + '0'; //To get 1st digit from month()
filename[5] = now.month()%10 + '0'; //To get 2nd digit from month()
filename[6] = now.day()/10 + '0'; //To get 1st digit from day()
filename[7] = now.day()%10 + '0'; //To get 2nd digit from day()

sensores = SD.open(filename, FILE_WRITE);
 sensores.println("uwu");
 Serial.println("uwu ");
sensores.close();
delay(1000);
Serial.println("creado ");

as=as+1;
  }
}





void registro(){

      if (millis() - startTime > timeThreshold)
  {
    ISRCounter++;
    startTime = millis();

    //dentro del if va el código que va en la interrupción para evitar el rebote...

      read_ads1222(0);
      read_ads1222(1);
           
                    S0= (sensor[0]- prom0)+35000;
                    S1= (sensor[1]- prom1)+1000;
                    S2= (sensor[2]- prom2)+5000;
                    S3= (sensor[3]- prom3)+20000;


Serial.println("creando archivo en la tarjeta microSD: ");

DateTime now = RTC.now();

filename[0] = (now.year()/1000)%10 + '0'; //To get 1st digit from year()
filename[1] = (now.year()/100)%10 + '0'; //To get 2nd digit from year()
filename[2] = (now.year()/10)%10 + '0'; //To get 3rd digit from year()
filename[3] = now.year()%10 + '0'; //To get 4th digit from year()
filename[4] = now.month()/10 + '0'; //To get 1st digit from month()
filename[5] = now.month()%10 + '0'; //To get 2nd digit from month()
filename[6] = now.day()/10 + '0'; //To get 1st digit from day()
filename[7] = now.day()%10 + '0'; //To get 2nd digit from day()

sensores = SD.open(filename, FILE_WRITE);
sensores.close();
delay(300);

     
    //escribir en la SD
  
  
  
  
  }
  else {
 Serial.println("error... ");
  }    
  }

