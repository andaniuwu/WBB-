#define sclk    9                          // (naranja con blanco) pin SCLK ADS1222 1 y 2, entrada de reloj de serie -D2
#define Dout1   3                          // (gris con rojo) pin Dout ADS1222 1, DRDY/DOUT drdy-> nivel bajo datos a leer listos, salida de datos por flaco positivo de slck, MSB primero -D3
#define Dout2   7                          // (gris) pin Dout ADS1222 2, DRDY/DOUT drdy-> nivel bajo datos a leer listos, salida de datos por flaco positivo de slck, MSB primero -D4
#define mux     5                          // (naranja) pin MUX ADS1222 1 y 2, selección de la entrada analógica 0->AINP1+ AINN1- 1->AINP2+ AINN2 -D5

#define PULSADOR_wii 2                     // -A0 (los dos negros)(entradas arduino uno)
#define LED_wii      6                     // -A1 (negativo azul, positivo blanco)
#define ON_wii       8                     // -A2 (gris)
  int pulsador;
unsigned long sensor [4] ={0, 0, 0, 0}, s[4] ={0, 1, 2, 3};

  float g0=0,g1=0,g2=0,g3=0,a=0,b=0,c=0,d=0;
  float prom0=0,prom1=0,prom2=0,prom3=0,S0=0,S1=0,S2=0,S3=0;
  int i,j,k,m,L;
  String x;

//Bibliotecas para pantalla Oled
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#define ANCHO_PANTALLA 128 // ancho pantalla OLED
#define ALTO_PANTALLA 64 // alto pantalla OLED

        Adafruit_SSD1306 display(128, 64);



//Bibliotecas y variables para RTC

#include "RTClib.h"
// RTC_DS1307 rtc; (si tuviera el otro)
RTC_DS3231 rtc;

//Bibliotecas y variables para Módulo microSD
#include <SD.h>
File Sensores;



//##########################################################################################
// Inicializa ADS1222
void iniADS1222(void){
byte x, n;
  digitalWrite(mux, HIGH);
  for (n =0; n <3; n++){                                          // realizamos 3 lecturas completas
    delay (10);
    for(x =0; x <24; x++){                                        // 24 pulsos-> 24 bits
      digitalWrite(sclk, HIGH);                                   // HIGH pulse, algo más de 33us
      delayMicroseconds(30);  
      digitalWrite(sclk, LOW);                                    // LOW pulse, algo más de 33us
      delayMicroseconds(30);                          
    }
  }
  delay (10);
  while (digitalRead(Dout1) + digitalRead(Dout2)){}               // esperamos datos preparados 
  for(x =0; x <26; x++){                                          // auto-calibrado 26 pulsos-> 24bits + 2  On calibración
    digitalWrite(sclk, HIGH); 
    delayMicroseconds(5);  
    digitalWrite(sclk, LOW); 
    delayMicroseconds(5);
   }

} 

// ADS1222 leemos (se leen los 20 bits MSB, solo son efectivos los 20 bits de más peso)
void read_ads1222(bool canal){
byte x, n =0, z =2;
  if (canal){
    n =1;
    z =3;
  }
  digitalWrite(mux, canal);                                        // selecionamos el canal
  delayMicroseconds(4);  //tenia 8
  do{
    delayMicroseconds(2); // tenía 2
  } while (digitalRead(Dout1) + digitalRead(Dout2));               // esperamos datos listos, Dout1 y Dout2 
  
  for(x =23; x >=4; x--){                                          // del bit 23 al 3
    digitalWrite(sclk, HIGH);
    digitalRead(Dout1) ? bitWrite(sensor[n], x, 1): bitWrite(sensor[n], x, 0);// algo más de 16us, leemos 0 y 1 
    digitalRead(Dout2) ? bitWrite(sensor[z], x, 1): bitWrite(sensor[z], x, 0);// algo más de 16us, leemos 2 y 3
    digitalWrite(sclk, LOW);
    delayMicroseconds(10);  //tenía 30
  }
  for (x =0; x <5; x++){                                           // realizamos 5 pulsos, bits del 3 al 0 + pulso 25 -> forzamos Dout1 y Dout2 a 1
  digitalWrite(sclk, HIGH);
  delayMicroseconds(10);  //tenía 30                                                 
  digitalWrite(sclk, LOW);
  delayMicroseconds(10);    //tenía 30
  }
}

// configuración inicial
void setup() {
byte ciclo =0;
  pinMode(ON_wii, OUTPUT);                           
  digitalWrite(ON_wii, HIGH);                             // encendemos controladore WII y TFT                                          
  pinMode(mux, OUTPUT);                           
  digitalWrite(mux, LOW);  
  pinMode(sclk, OUTPUT);                           
  digitalWrite(sclk, LOW); 
  pinMode(LED_wii, OUTPUT);
  digitalWrite(LED_wii, HIGH);  
  pinMode(PULSADOR_wii, INPUT_PULLUP);    
  pinMode(Dout1, INPUT);
  pinMode(Dout2, INPUT);          

  //pantalla oled
    delay(100);
    Wire.begin();
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.setRotation(0);
    display.dim(true);
    display.setTextColor(WHITE);
    display.setTextSize(1);
    display.clearDisplay();
    display.setCursor(0,0);
    display.print(F("calibrando... por favor espere."));
    display.display();
    delay(100);
  



  digitalWrite(LED_wii, HIGH);
  iniADS1222();
  delay(200);


//interrupción
attachInterrupt(digitalPinToInterrupt(12),Registro, HIGH);

//calibración
      read_ads1222(0);
      read_ads1222(1);



 
      for(int i = 0; i<10; i++){
          g0 =  sensor[0];
          g1 =  sensor[1];
          g2 =  sensor[2];
          g3 =  sensor[3];

          a = a+g0;
          b = b+g1;
          c = c+g2;
          d = d+g3;
delay (10);

      }

          prom0 = (a/10);
          prom1 = (b/10);
          prom2 = (c/10);
          prom3 = (d/10);


       display.clearDisplay();
       display.print("calibración terminada uwu/n presione el botón para comenzar a registrar");
       display.display();
}



// **-MAIN-**
void loop() {

  
      read_ads1222(0);
      read_ads1222(1);

      //ajustes en la calibración porque aún variaba sacando promedio//     
                    S0= (sensor[0]- prom0)+35000;
                    S1= (sensor[1]- prom1)+1000;
                    S2= (sensor[2]- prom2)+5000;
                    S3= (sensor[3]- prom3)+20000;
            

      
}


void Registro(){

  //aqui es la interrupción e irá la configuración del guardado de datos en la SD con fecha y hora
      read_ads1222(0);
      read_ads1222(1);
           

}
